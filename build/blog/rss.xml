<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>MetaTrip Blog</title>
        <link> https://777sunny777.github.io/metaTrip/metaTrip/build/blog</link>
        <description>MetaTrip Blog</description>
        <lastBuildDate>Fri, 14 Jan 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[常见宽基指数基金(二)]]></title>
            <link> https://777sunny777.github.io/metaTrip/metaTrip/build/blog/funding-basic3</link>
            <guid>funding-basic3</guid>
            <pubDate>Fri, 14 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[- From 《指数基金投资指南》章节3]]></description>
            <content:encoded><![CDATA[<p>:::tip</p><ul><li>From 《指数基金投资指南》章节3</li><li>小白学习，切勿盲目跟从
:::</li></ul><h2>常见宽基指数基金</h2><table><thead><tr><th>序号</th><th>名称</th><th>指数简介</th><th>股票个数</th></tr></thead><tbody><tr><td>10</td><td>中证基本面50指数(000925, 399925)</td><td>按照4个基本面指标，挑选综合最强的50个公司</td><td>50</td></tr><tr><td>10</td><td>央视财经50指数(399550)</td><td>央视联合高校专家挑选, 忽略</td><td>50</td></tr><tr><td>10</td><td>恒生指数(HSI)</td><td>港交所, DQII 代购，香港上市规模最大50家</td><td>50</td></tr><tr><td>10</td><td>H 股指数(恒生中国企业指数)</td><td>公司在内地注册，香港上市就是H股，挑选的是40家最大的H股</td><td>40</td></tr><tr><td>10</td><td>上证50AH优选指数</td><td>27纯A，23同时具有AH公司中相对便宜的那一类</td><td>50</td></tr><tr><td>10</td><td>纳斯达克100指数(NDX)</td><td>美国股市，纳斯达克最大100家，DQII代购</td><td>100</td></tr><tr><td>10</td><td>标普500指数</td><td>类似国内的沪深300</td><td>300</td></tr></tbody></table><blockquote><h3>基本面指数特点</h3><ul><li>另一种加权策略，4个维度来衡量，营业收入，现金流，净资产和分红。</li><li>往往也都是大盘股，和上证50指数相似，单挑选股从4个维度出发，会考虑更全面些。</li></ul></blockquote><blockquote><h3>QDII 基金</h3><ul><li>投资于香港，美国等市场的基金品种</li><li>这种基金我们可以理解为‘代购’</li><li>有暂停申购，可以赎回的风险，内地市场暂时不成熟</li></ul></blockquote><blockquote><h3>H股指数特点</h3><ul><li>有重复，但不是恒生指数</li><li>以境外投资者为主</li><li>与A股指数有密切的关系，很多公司在A股和H股都有上市，比如H股指数和上证50重合度高，上证50是中国投资者为主，
H股指数是欧美投资者为主， 两者的涨跌有时差，并不严格同步，但是长期趋势一致，所以买入AH股中相对便宜的，卖出贵的是其策略</li></ul></blockquote><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>上证50指数</td><td>27纯A，23同时具有AH公司中的A股</td></tr><tr><td>50AH优选指数</td><td>27纯A，23同时具有AH公司中相对便宜的那一类</td></tr><tr><td>H股指数</td><td>17纯H，23同时具有AH公司中的H股</td></tr></tbody></table>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[常见宽基指数基金(一)]]></title>
            <link> https://777sunny777.github.io/metaTrip/metaTrip/build/blog/funding-basic2</link>
            <guid>funding-basic2</guid>
            <pubDate>Tue, 11 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[- From 《指数基金投资指南》章节3]]></description>
            <content:encoded><![CDATA[<p>:::tip</p><ul><li>From 《指数基金投资指南》章节3</li><li>小白学习，切勿盲目跟从
:::</li></ul><h2>指数基金分类</h2><p>最常见的分类就是宽基指数和行业指数。</p><ul><li>指数基金在挑选股票的时候，不限制投资行业，就是<strong>宽基指数基金</strong>。</li><li>指数基金在挑选股票的时候，限制投资行业，就是<strong>行业指数基金</strong>。行业指数基金受行业特性的影响非常大。</li></ul><p>从交易渠道上可以分为场内指数基金和场外指数基金，这个场指的是证卷交易所。</p><ul><li>场内指数基金在证卷交易所上市，可以有‘申购赎回’和‘买入卖出’两套交易体系，其中买入卖出方式需要在证卷交易所进行</li><li>场外基金，不在证卷交易所上市，只有‘申购赎回’一种</li><li>场内基金主要有两种：ETF和LOF基金，这两种基金都有可以在交易所进行自由买卖，不同的是，ETF只能通过股票交易软件交易，LOF除此之外还可以像场外基金一样通过‘申购赎回’方式交易</li></ul><h2>常见宽基指数基金</h2><table><thead><tr><th>序号</th><th>名称</th><th>指数简介</th><th>股票个数</th></tr></thead><tbody><tr><td>1</td><td>上证50指数(000016)</td><td>是从上交所挑选的沪市规模最大，流动性好，最具代表性的50只股票组成的样本</td><td>50</td></tr><tr><td>2</td><td>沪深300指数(000300, 399300)</td><td>是中证指数公司开发的，从上交所和深交所挑选的，规模最大，流动性好的300只股票</td><td>300</td></tr><tr><td>3</td><td>中证500指数(000905,399905)</td><td>是中证指数公司开发的，从上交所和深交所挑选的，排除沪深300的，国内中型公司代表</td><td>500</td></tr><tr><td>4</td><td>创业板指数(399006)</td><td>创业板最主要100家企业</td><td>100</td></tr><tr><td>5</td><td>创业板50指数(399673)</td><td>创业板最主要50家企业</td><td>50</td></tr><tr><td>6</td><td>上证红利指数(000015)</td><td>最老牌，大盘股为主，上交所过去两年平均现金股息率最高的50只股票</td><td>50</td></tr><tr><td>7</td><td>中证红利指数(000922，399922)</td><td>从上交所和深交所挑选，过去两年平均现金股息率最高的100只股票</td><td>100</td></tr><tr><td>8</td><td>深证红利指数(399324)</td><td>深交所过去两年平均现金股息率最高的40只股票</td><td>40</td></tr><tr><td>9</td><td>红利机会指数(CSPSADRP)</td><td>标普公司围绕A股开发的红利指数，挑选更严格</td><td>100</td></tr></tbody></table><blockquote><h3>指数基金的挑选</h3><ul><li>规模比较大，历史比较长，追踪效果好</li><li>要避开规模较小的指数基金，有亏本清盘风险，最好规模在1亿以上</li><li>寻找费用最低，误差最小的品种</li><li>另一种思路是选择有特色的增强型指数基金，复制指数的基础上，寻找短期机会，有风险，可能差于普通的指数基金</li></ul></blockquote><blockquote><h3>A股上交所大盘股历史走势特点</h3><ul><li>总体走势是上涨的</li><li>从03年底以来，只有07，09，15三个明显牛市，其余走平或阴跌</li><li>A股经常暴涨或暴跌，指数基金也带有这个特征，需要注意</li></ul></blockquote><blockquote><h3>上证50指数特点</h3><ul><li>大盘股为主，规模最小也有350多亿，都是关系国计民生的大公司，这些大公司股票也叫<strong>蓝筹股</strong>，上证50并不是投资市场的整体指数，更多的是<strong>投资大盘股</strong></li><li>只有上交所股票，没有深交所股票，没法反应国内股票的整体走势</li></ul></blockquote><blockquote><h3>沪深300指数特点</h3><ul><li>占国内股市全部规模的60%以上</li><li>以大盘股为主，兼顾上海和深圳上市公司</li><li>上证50包含在沪深300中，所以两个指数很多时候表现也比较重合</li></ul></blockquote><blockquote><h3>中证500指数特点</h3><ul><li>以中型上市公司为主，兼顾上海和深圳上市公司</li><li>与沪深300无重合</li></ul></blockquote><blockquote><h3>创业板指数特点</h3><ul><li>创业板相关的指数有两个，一个是创业板综指（衡量创业板所有上市公司股价平均表现），一个是创业板指数（最主要的100家创业板上市公司）</li><li>创业板50指数，相当于创业板的‘上证50’</li><li>公司规模小，以小中公司为主，更容易暴涨暴跌</li></ul></blockquote><blockquote><h3>红利指数特点</h3><ul><li>前面介绍的都是按照市值来加权的，即股票规模越大，权重越高</li><li>红利指数是按照股息率来加权的</li><li>高股息率，在熊市更有优势，熊市分到的100万能买到更多牛市分到100万的股票份额</li><li>能长期发放现金股息的公司，盈利能力财务状况更好</li></ul></blockquote>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How to use Storybook 2]]></title>
            <link> https://777sunny777.github.io/metaTrip/metaTrip/build/blog/storybook-usage2</link>
            <guid>storybook-usage2</guid>
            <pubDate>Sun, 09 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[- 这篇blog是storybook的入门教程并且包含了我使用storybook 3年多的一些体验]]></description>
            <content:encoded><![CDATA[<p>:::tip</p><ul><li>这篇blog是storybook的入门教程并且包含了我使用storybook 3年多的一些体验 </li><li>只针对React项目</li><li>进一步学习，请访问<a href="https://storybook.js.org/">Storybook官网</a>
:::</li></ul><p><a href="https://storybook.js.org/">Storybook</a> is an open source tool for building UI components and pages in isolation. It streamlines UI development, testing, and documentation.</p><p>从Storybook的官方描述来看，他是用于快速构建UI demo的工具，可以帮用户快速构建页面；并且有很好的语法功能，轻松书写demo；还有很好的辅助插件，
比如demo的文档辅助，参数辅助，还有accessibility辅助测试等等。这一切几乎促使它成为了项目demo的最好选择。因为我的项目涉及到组件库的开发，
所以storybook就更显得合适和重要。</p><p>:::note</p><ul><li>version: v6.4.9(Currently) and <a href="https://github.com/storybookjs/storybook/releases">Latest</a>
:::</li></ul><p>Storybook 代码库更新很活跃，几乎一年一次major版本的更新，总会带来些新的功能，这篇blog我们那目前最新版本v6.4.9 为例进行说明</p><h2>4. Configure</h2><p>Storybook is configured via a folder called .storybook, which contains various configuration files.</p><p>Storybook配置文件一般是放在.storybook的文件夹下面，通过-c也可以进行路径配置。主要包含如下三个文件：main.js preview.js and manager.js
<a href="https://storybook.js.org/docs/react/configure/overview">Detials</a></p><h3>4-1. main.js</h3><p>The main configuration file is main.js.</p><p>:::note</p><ul><li>This file controls the Storybook server&#x27;s behavior, so you must restart Storybook’s process when you change it.
:::</li></ul><p>The main.js configuration file is a preset and, as such, has a powerful interface, but the key fields within it are:</p><ul><li>stories: 主要是配置storie cases的路径，默认是文件名中带有 stories 的文件，文件路径，文件名规则，文件后缀都是可配置的。</li><li>addons - 配置一下页面中需要用到的addons.</li><li>webpackFinal - 自定义的 webpack configuration.</li><li>babel - 自定义的 babel configuration.</li></ul><pre><code class="language-jsx">// .storybook/main.js

module.exports = {
  stories: [&#x27;../packages/MyStories&#x27;],
  addons: [&#x27;@storybook/addon-essentials&#x27;],
  webpackFinal: async (config, { configType }) =&gt; {
    config.module.rules.push({
      test: /\.scss$/,
      use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;, &#x27;sass-loader&#x27;],
      include: path.resolve(__dirname, &#x27;../&#x27;),
    });

    return config;
  },
    babel: async (options) =&gt; ({
    ...options,
    // any extra options you want to set
  })
};

</code></pre><h4>On-demand story loading：</h4><p>按需加载stories，进行性能提升，<strong>Starting with Storybook 6.4</strong>, you can optimize your story loading by enabling the storyStoreV7 feature flag in your configuration as follows:</p><pre><code class="language-jsx">// .storybook/main.js

module.exports = {
  stories: [],
  addons: [&#x27;@storybook/addon-essentials&#x27;],
  features: {
    storyStoreV7: true,
  },
};

</code></pre><h3>4-2. preview.js</h3><p>To control the way stories are rendered and add global decorators and parameters</p><ul><li>This is loaded in the Canvas tab</li><li>Use preview.js for global code that applies to all stories.</li></ul><p>The preview.js file can be an ES module and export the following keys:</p><ul><li>decorators：包含页面结构和全局样式，都可以在decorators中定义</li><li>parameters：一般可以配置全局的docs和action，background</li><li>globalTypes: </li></ul><pre><code class="language-jsx">// .storybook/preview.js

// createGlobalStyle from styled-component
import GlobalStyles from &#x27;./GlobalStyles&#x27;;

export const decorators = [
  (Story) =&gt; (
    &lt;GlobalStyles /&gt;
    &lt;div style={{ margin: &#x27;3em&#x27; }}&gt;
      &lt;Story /&gt;
    &lt;/div&gt;
  ),
];

export const parameters = {
  backgrounds: {
    values: [
      { name: &#x27;red&#x27;, value: &#x27;#f00&#x27; },
      { name: &#x27;green&#x27;, value: &#x27;#0f0&#x27; },
    ],
  },
};

export const globalTypes = {
  theme: {
    name: &#x27;Theme&#x27;,
    description: &#x27;Global theme for components&#x27;,
    defaultValue: &#x27;light&#x27;,
    toolbar: {
      icon: &#x27;circlehollow&#x27;,
      // Array of plain string values or MenuItem shape (see below)
      items: [&#x27;light&#x27;, &#x27;dark&#x27;],
      // Property that specifies if the name of the item will be displayed
      showName: true,
    },
  },
};

</code></pre><h3>4-3. manager.js</h3><p>To control the layout of Storybook’s UI you can use addons.setConfig in your .storybook/manager.js:</p><pre><code class="language-jsx">// .storybook/manager.js

import { addons } from &#x27;@storybook/addons&#x27;;

addons.setConfig({
  isFullscreen: false,
  showNav: true,
  showPanel: true,
  panelPosition: &#x27;bottom&#x27;,
  enableShortcuts: true,
  isToolshown: true,
  theme: undefined,
  selectedPanel: undefined,
  initialActive: &#x27;sidebar&#x27;,
  sidebar: {
    showRoots: false,
    collapsedRoots: [&#x27;other&#x27;],
  },
  toolbar: {
    title: { hidden: false, },
    zoom: { hidden: false, },
    eject: { hidden: false, },
    copy: { hidden: false, },
    fullscreen: { hidden: false, },
  },
});

</code></pre><h2>5. Essential addons and Addons</h2><p>Storybook在发展的过程中，会吸收一些常用的addon，作为框架预制的addon，这个就是Essential addons and Addons的区别。
低版本的control 实际上是一个@storybook/addon-knobs，在V6版本可以内置生成了。但是这个插件本身目前是向下兼容的</p><h3>5-1. Essential addons</h3><p>If you&#x27;re upgrading from a previous Storybook version, you&#x27;ll need to run the following command in your terminal:</p><pre><code class="language-jsx">#With npm
npm install -D @storybook/addon-essentials

#With yarn
yarn add -D @storybook/addon-essentials

// .storybook/main.js

module.exports = {
  addons: [&#x27;@storybook/addon-essentials&#x27;],
};

</code></pre><p>There are many third-party addons as well as “official” addons developed by the Storybook core team.、
<a href="https://storybook.js.org/docs/react/essentials/introduction">Detials</a></p><ul><li>Docs</li><li>Controls</li><li>Actions</li><li>Viewport</li><li>Backgrounds</li><li>Toolbars &amp; globals</li><li>Measure</li><li>Outline</li></ul><h3>5-2. Install 3rd party addons</h3><p>Storybook has <a href="https://storybook.js.org/addons">hundreds of reusable addons</a> that are packaged as NPM modules.</p><h4>Using addons</h4><p><a href="https://storybook.js.org/docs/react/addons/install-addons#using-addons">Detials</a></p><pre><code class="language-jsx">
yarn add -D @storybook/addon-a11y

// .storybook/main.js

module.exports = {
  stories: [],
  addons: [
    // Other Storybook addons
    &#x27;@storybook/addon-a11y&#x27;, //👈 The addon registered here
  ],
};

</code></pre><img src="https://storybook.js.org/5c457fbc275d0c3e2a37aae388a6019f/storybook-addon-installed-registered.png" alt="Storybook addon" style="width:100%"/><h3>5-3. 自定义addons</h3><p>Now let’s add a panel to Storybook. Inside the src directory, create a new file called register.js and add the following:
<a href="https://storybook.js.org/docs/react/addons/writing-addons#add-a-panel">Detials</a></p><pre><code class="language-jsx">// /my-addon/src/register.js

import React from &#x27;react&#x27;;

import { addons, types } from &#x27;@storybook/addons&#x27;;

import { AddonPanel } from &#x27;@storybook/components&#x27;;

const ADDON_ID = &#x27;myaddon&#x27;;
const PANEL_ID = `${ADDON_ID}/panel`;

// give a unique name for the panel
const MyPanel = () =&gt; &lt;div&gt;MyAddon&lt;/div&gt;;

addons.register(ADDON_ID, (api) =&gt; {
  addons.add(PANEL_ID, {
    type: types.PANEL,
    title: &#x27;My Addon&#x27;,
    render: ({ active, key }) =&gt; (
      &lt;AddonPanel active={active} key={key}&gt;
        &lt;MyPanel /&gt;
      &lt;/AddonPanel&gt;
    ),
  });
});
</code></pre><p>:::note</p><ul><li>register 需要在main.js进行注册（When you register a Storybook addon, it will look for either register.js or preset.js as the entry points.）
:::</li></ul><img src="https://storybook.js.org/8a84ad965e96ef91ab0feb62f03b48b9/addon-initial-state.png" alt="Storybook addon" style="width:100%"/><h2>6. CLI options</h2><p>Storybook comes with two CLI utilities: start-storybook and build-storybook.
<a href="https://storybook.js.org/docs/react/api/cli-options">Detials</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[资产与指数]]></title>
            <link> https://777sunny777.github.io/metaTrip/metaTrip/build/blog/funding-basic1</link>
            <guid>funding-basic1</guid>
            <pubDate>Thu, 06 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[- From 《指数基金投资指南》章节1，2]]></description>
            <content:encoded><![CDATA[<p>:::tip</p><ul><li>From 《指数基金投资指南》章节1，2</li><li>小白学习，切勿盲目跟从
:::</li></ul><h2>资产</h2><ul><li>能够为我们”生钱“的就是资产，<strong>现金</strong>不是资产</li><li>资产分为能够产生现金流的资产和不能产生现金流的资产</li></ul><blockquote><p>比如银行理财一个5%，一个3%，另一个是农村合作社的5%， 这些都是可以产生现金流的资产，他的价格取决于现金流的大小和稳定性。
银行的稳定性高于农村合作社，5%高于3%，你就很容易知道哪个资产更优质</p></blockquote><blockquote><p>不能产生现金流的资产，他的价格主要取决于供求关系，比如乱世黄金，特殊时期下供需关系发生改变，才会更值钱。</p></blockquote><blockquote><p>能产生现金流的资产通常比不能产生现金流的资产，<strong>长期收益率更高</strong>。黄金的长期收益率甚至低于国债。</p></blockquote><h2>指数</h2><ul><li>指数是一个选股规则，他的目的是按照某个规则挑选出一篮子股票，并反应这一篮子股票的<strong>平均价格走势</strong>。</li></ul><blockquote><p>例如沪深300指数，是由上海和深圳证券市场中选取300只A股作为样本编制而成的成分股指数，我们只需要看下沪深300指数，
就可以知道国内最大的300只股票，今天是整体涨了还是跌了。</p></blockquote><ul><li><p>指数点数，是指数背后公司的平均股价，这个点数下跌或上涨，代表指数背后公司股价的下跌或上涨，长期来看，指数点数是<strong>不断上涨的</strong></p></li><li><p>指数基金就是基金公司开发一个基金产品。也是完全按照指数的规则去选股，因为指数基金持有的股票种类，数量，比例都和指数非常接近，
所以指数基金的表现也和指数也非常接近，也就是说指数基金把指数的抽象概念变成了实际的产品。</p></li></ul><blockquote><p>指数基金的三个特点：长生不老，产期上涨，成本低。</p></blockquote>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How to use Storybook 1]]></title>
            <link> https://777sunny777.github.io/metaTrip/metaTrip/build/blog/storybook-usage1</link>
            <guid>storybook-usage1</guid>
            <pubDate>Sat, 01 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[- 这篇blog是storybook的入门教程并且包含了我使用storybook 3年多的一些体验]]></description>
            <content:encoded><![CDATA[<p>:::tip</p><ul><li>这篇blog是storybook的入门教程并且包含了我使用storybook 3年多的一些体验 </li><li>只针对React项目</li><li>进一步学习，请访问<a href="https://storybook.js.org/">Storybook官网</a>
:::</li></ul><p><a href="https://storybook.js.org/">Storybook</a> is an open source tool for building UI components and pages in isolation. It streamlines UI development, testing, and documentation.</p><p>从Storybook的官方描述来看，他是用于快速构建UI demo的工具，可以帮用户快速构建页面；并且有很好的语法功能，轻松书写demo；还有很好的辅助插件，
比如demo的文档辅助，参数辅助，还有accessibility辅助测试等等。这一切几乎促使它成为了项目demo的最好选择。因为我的项目涉及到组件库的开发，
所以storybook就更显得合适和重要。</p><p>:::note</p><ul><li>version: v6.4.9(Currently) and <a href="https://github.com/storybookjs/storybook/releases">Latest</a>
:::</li></ul><p>Storybook 代码库更新很活跃，几乎一年一次major版本的更新，总会带来些新的功能，这篇blog我们那目前最新版本v6.4.9 为例进行说明</p><h2>0. Storybook页面布局</h2><h3>Sidebar and Canvas</h3><video controls="" autoplay="" loop="" style="width:100%"><source src="https://storybook.js.org/f818682edbbcdf2c04093f633aa36761/example-browse-all-stories-optimized.mp4" type="video/mp4"/></video><h3>Shortcuts</h3><video controls="" autoplay="" loop="" style="width:100%"><source src="https://storybook.js.org/b398f68ed8889feed0a52f077510efcf/storybook-keyboard-shortcuts-optimized.mp4" type="video/mp4"/></video><h3>Toolbar</h3><video controls="" autoplay="" loop="" style="width:100%"><source src="https://storybook.js.org/8b083907d74e7f2b9a298e5f324cc751/toolbar-walkthrough-optimized.mp4" type="video/mp4"/></video><h3>Docs</h3><video controls="" autoplay="" loop="" style="width:100%"><source src="https://storybook.js.org/07234fedf00ba418879c443de0764c1c/toolbar-docs-tab-optimized.mp4" type="video/mp4"/></video><h3>Addons</h3><video controls="" autoplay="" loop="" style="width:100%"><source src="https://storybook.js.org/946b2f4bdb006e8475d21202d68b9eec/addons-walkthrough-optimized.mp4" type="video/mp4"/></video><h2>1. 安装</h2><p>Storybook 的<a href="https://storybook.js.org/docs/react/get-started/install">安装</a>很智能，npx sb init 就可以直接进行安装，但是要注意的是安装之前你必须已经有项目框架的依赖。</p><p>:::note</p><ul><li>Storybook will look into your project&#x27;s dependencies during its install process and provide you with the best configuration available.</li><li>Storybook只是需要项目框架依赖，比如react就相当于一个标识，你不需要写任何框架代码在项目中
:::</li></ul><h2>2. Write stories</h2><p>Story就是一个demo case，stories file就是存放一类demo cases的集合，这些cases根据title分成不同的类型</p><pre><code class="language-jsx">// 这个一个展示button的stories file
// Button.stories.js|jsx

import React from &#x27;react&#x27;;

import { Button } from &#x27;./Button&#x27;;

export default {
  
  // title是这个集合的名称，同时也用于storybook 导航栏的结构
  // 比如可以有层级关系，&#x27;Button/Responsive&#x27;

  title: &#x27;Button&#x27;,
  
  // component 属性可以不写, 后面解释文档的时候再详细说
  // Storybook uses the component key in the story file’s default export to extract the component&#x27;s description and props.
  
  component: Button,
};

// 这里通过export导出就生成了一个demo case page
// 路径就是左侧导航栏中 Button下面的Primary

export const Primary = () =&gt; &lt;Button primary&gt;Button&lt;/Button&gt;;

// 这里可以改变case的命名，默认是function name
Primary.storyName = &#x27;I am the primary&#x27;;

export const Secondary = () =&gt; &lt;Button backgroundColor=&quot;#ff0&quot; label=&quot;😄👍😍💯&quot; /&gt;;
export const Tertiary = () =&gt; &lt;Button backgroundColor=&quot;#ff0&quot; label=&quot;📚📕📈🤓&quot; /&gt;;

</code></pre><h3>2-1 Using args</h3><p>使用args是最新版本中storybook 比较建议的写法，主要的优点是减少重复代码，用法上也比较有章可循，便于管理。
不过根据我的经验还是要看你用storybook的target是什么，如果只是for show UI demo，使用args 的方式是可行的。
但是比如做组件库，show UI demo只是一个方面，show demo code for users 也是很重要的一点，我们希望通过storybook的cases可以让用户
直观的明白demo 要怎么写，甚至只需要他copy/paste就可以。在这种情况下，我们就需要尽量少的使用storybook提供的一些接口方法，减少storybook
对你的demo case code 的干扰。</p><p>任何时候，我们都要明白用户关心的是什么？而不是盲目的求新求变。</p><pre><code class="language-jsx">import React from &#x27;react&#x27;;
import { Button } from &#x27;./Button&#x27;;

export default {
  title: &#x27;Button&#x27;,
  component: Button,
};

//👇 We create a “template” of how args map to rendering
const Template = (args) =&gt; &lt;Button {...args} /&gt;;

// 👇 Each story then reuses that template
export const Primary = Template.bind({});
Primary.args = { background: &#x27;#ff0&#x27;, label: &#x27;Button&#x27; };

export const Secondary = Template.bind({});
Secondary.args = { ...Primary.args, label: &#x27;😄👍😍💯&#x27; };

export const Tertiary = Template.bind({});
Tertiary.args = { ...Primary.args, label: &#x27;📚📕📈🤓&#x27; };
</code></pre><h3>2-2 Remix two stories</h3><p>Story是可以相互引用的，主要也是为了减少重复代码，保持一致性。</p><pre><code class="language-jsx">import React from &#x27;react&#x27;;
import { Button } from &#x27;./Button&#x27;;
import * as TextInputStories from &#x27;./TextInput.stories&#x27;;

export default {
  title: &#x27;Button&#x27;,
  component: Button,
};

export const TestRemix = () =&gt; &lt;&gt;
  &lt;TextInputStories.Default /&gt;
  &lt;Button primary&gt;Button&lt;/Button&gt;
&lt;&gt;

</code></pre><h3>2-3 Controls</h3><p>首先Control是很好的功能，对于show UI demo 是很方便直观的展示，对于V6版本，Control 是内置插件，只需要通过Template和args配合就可以自动生成</p><p><a href="https://storybook.js.org/docs/react/essentials/controls">详细写法</a></p><p>在低版本中(V6仍然支持addons写法)，是通过安装addon-knobs插件来实现的。 </p><video controls="" autoplay="" loop="" style="width:100%"><source src="https://storybook.js.org/9d2e1f29cfb010e3aae6cd76547c4bab/addon-controls-optimized.mp4" type="video/mp4"/></video><p>根据我的经验，和using args 一样，使用还是不使用需要根据项目需求，或者寻找折中的方法而两者兼顾。</p><h3>2-4 Action</h3><p>我目前还没有找到Action的合适场景。它和Control一样的，在V6版本中是内置插件，需要argTypes来定义，新版本V6中需要写成template形式才能触发。</p><video controls="" autoplay="" loop="" style="width:100%"><source src="https://storybook.js.org/b0366940cf7195b6d5b646c6105c217c/addon-actions-optimized.mp4" type="video/mp4"/></video><pre><code class="language-jsx">import { Button } from &#x27;./Button&#x27;;

export default {
  title: &#x27;Button&#x27;,
  component: Button,
  argTypes: { onClick: { action: &#x27;clicked&#x27; } },
};

</code></pre><pre><code class="language-jsx">// .storybook/preview.js

export const parameters = {
  actions: { argTypesRegex: &#x27;^on.*&#x27; }
}

</code></pre><h3>2-5 Using parameters</h3><p>Parameters are Storybook’s method of defining static metadata for stories.
A story’s parameters can be used to provide configuration to various addons at the level of a story or group of stories.</p><p>Parameters主要是为stories做一些页面配置, 也可以在preview中进行global的配置</p><pre><code class="language-jsx">  parameters: {
    docs: { page: null },
    actions: { argTypesRegex: &#x27;^on.*&#x27; },
    centered: { disable: true },
    backgrounds: {
      values: [
        { name: &#x27;red&#x27;, value: &#x27;#f00&#x27; },
        { name: &#x27;green&#x27;, value: &#x27;#0f0&#x27; },
        { name: &#x27;blue&#x27;, value: &#x27;#00f&#x27; },
      ],
    },
  },
</code></pre><h3>2-6 Using decorators</h3><p>Decorators are a mechanism to wrap a component in arbitrary markup when rendering a story.
Components are often created with assumptions about ‘where’ they render.
Your styles might expect a theme or layout wrapper, or your UI might expect specific context or data providers.</p><p>decorators就是页面装饰，可以有机会给页面做一些dom结构或者样式的调整</p><pre><code class="language-jsx">import React from &#x27;react&#x27;;
import { Button } from &#x27;./Button&#x27;;

export default {
  title: &#x27;Button&#x27;,
  component: Button,
  decorators: [
    (Story) =&gt; (
      &lt;div style={{ margin: &#x27;3em&#x27; }}&gt;
        &lt;Story /&gt;
      &lt;/div&gt;
    ),
  ],
};
</code></pre><h2>3. Write Docs</h2><p>Storybook 目前主要提供了三种方式用于文档的书写</p><h3>3-1 利用component parameters</h3><h4>优点：</h4><ul><li>可以自动解析组件中的props</li></ul><h4>缺点：</h4><ul><li>interface的format要严格</li><li>docs中不能自定义，是自动生成的</li></ul><pre><code class="language-jsx">// ButtonGroup.stories.js|jsx
import React from &#x27;react&#x27;;
import { Button, ButtonGroup } from &#x27;./ButtonGroup&#x27;;

export default {
  title: &#x27;ButtonGroup&#x27;,
  // storybook use the component/subcomponents to extract the component&#x27;s description and props
  // override the docs.page parameters with null to remove its content
  component: ButtonGroup,
  subcomponents: { Button },
};
</code></pre><h3>3-2 mdx</h3><p>:::note</p><ul><li>Currently there&#x27;s an issue when using MDX stories with IE11. This issue does not apply to Docs page
:::</li></ul><p>MDX 是非常好的书写docs的方式，如果你的项目不需要兼容IE11，我强烈建议你用mdx的方式来写case的文档。</p><h4>优点：</h4><ul><li>可以将md和JSX混合书写，非常灵活</li></ul><h4>缺点：</h4><ul><li>不支持IE11</li></ul><p><a href="https://storybook.js.org/docs/react/writing-docs/mdx">详细</a></p><p>MDX is a standard file format that combines Markdown with JSX.
It means you can use Markdown’s terse syntax (such as # heading) for your documentation,
write stories that compile to our component story format, and freely embed JSX component blocks at any point in the file. All at once.</p><h3>3-3 利用docs parameters</h3><p>因为IE11而用不了mdx，可以尝试用jsx组件配置到docs.page的方式进行docs的书写。个人认为，如果你的项目支持IE11，而且你还希望自定义docs内容，
用这种方式是最好选择</p><h4>优点：</h4><ul><li>可以写JSX，自定义docs页面布局样式</li><li>支持IE11</li></ul><h4>缺点：</h4><ul><li>不能用md</li></ul><pre><code class="language-jsx">// ButtonGroup.stories.js|jsx
import React from &#x27;react&#x27;;
import { Button, ButtonGroup } from &#x27;./ButtonGroup&#x27;;
import { customDocumentComponemt } from &#x27;./customDocumentComponemt&#x27;; //jsx file

export default {
  title: &#x27;ButtonGroup&#x27;,
  component: ButtonGroup,
  parameters: {
    docs: {
      page: customDocumentComponemt
    }
  }
};
</code></pre>]]></content:encoded>
        </item>
    </channel>
</rss>